version: '3'

volumes:
  postgres-data:
    name: rails_postgres-data

networks:
  default:
    name: littlesis

services:
  app:
    image: littlesis:latest
    stdin_open: true
    tty: true
    init: true
    shm_size: '2gb'
    ports:
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:3035:3035"
    volumes:
      - ./:/littlesis
      # see https://stackoverflow.com/questions/30043872/docker-compose-node-modules-not-present-in-a-volume-after-npm-install-succeeds
      - /littlesis/node_modules
    depends_on:
      - redis
      - postgres
    environment:
      - RAILS_ENV=development
      - LITTLESIS_BIND=tcp://0.0.0.0:8080
      - RAILS_SERVE_STATIC_FILES=true
      - WEB_CONCURRENCY=1
    extra_hosts:
      - "test.host:127.0.0.1"

  redis:
    image: redis:6

  postgres:
    image: postgres:14
    command: ["postgres", "-c", "config_file=/etc/postgresql.conf"]
    shm_size: '2gb'
    volumes:
      - ./config/docker/postgresql.conf:/etc/postgresql.conf
      - ./config/docker/pg-setup-database.sh:/docker-entrypoint-initdb.d/pg-setup-database.sh
      - ./data:/data
      - postgres-data:/var/lib/postgresql/data
    ports:
      - '127.0.0.1:5432:5432'
    environment:
      POSTGRES_PASSWORD: "postgres"

  nginx:
    image: nginx:latest
    ports:
       - "127.0.0.1:8081:80"
       - "127.0.0.1:9000:9000"
    volumes:
      - ./:/littlesis
      - ./config/docker/nginx.conf:/etc/nginx/nginx.conf
      - ./log:/var/log/nginx
    links:
      - app

  title_extractor:
    image: title-extractor:latest
    build: ./lib/title-extractor
    profiles: ["title_extractor", "development"]
    ports:
       - "127.0.0.1:8888:8888"

  esbuild:
    image: littlesis:latest
    command:  ['npm', 'run', 'build-watch']
    profiles: ["esbuild", "development"]
    volumes:
      - ./:/littlesis
      - /littlesis/node_modules
    environment:
      - RAILS_ENV=development
