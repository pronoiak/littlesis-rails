#!/usr/bin/env ruby
raise RuntimeError if ENV['RAILS_ENV'] == 'production'

require 'getoptlong'
require 'fileutils'

# Travel to Rails root relative to this file
REPO = File.expand_path('..', __dir__).freeze
Dir.chdir(REPO)

DOCKER_COMPOSE = "docker compose".freeze
SERVICES = %w[app postgres redis nginx esbuild manticore jsserver].freeze
FOLDERS = %w[tmp data data/external_data data/external_data/original data/external_data/csv public/oligrapher public/images public/images/large public/images/original public/images/profile public/images/small public/images/oligrapher db/postgresql db/postgresql/primary db/postgresql/replica db/postgresql/archive].freeze

HELP = <<TEXT
Usage: littlesis [options] <command> -- [arguments for command]

Options
          --help            Show this help message
          --verbose         Debug information
          --pretend         Print command to be executed
          --test            Set RAILS_ENV = test
          --development     Set RAILS_ENV = development (default)
          -e NAME=var       Add env variable to docker exec

Commands
           docker           run any docker compose comand
           up               start docker containers
           down             stop docker containers
           build            build littlesis docker image
           bash             interative bash shell
           logs             follow rails logs
           status           check status of docker containers
           console          launch rails console
           redis            launch redi cli
           data             external data ETL tools
           fec              FEC data ETL tools
           sec              SEC data ETL tools
           edit             select file to open with $EDITOR
           runner           run bin/rails runner <file>
           script           execute named script in lib/scripts
           esbuild          bundle javascript

Aliases
           bundle
           gem
           pumactl
           rspec
           rails
           psql
           pg_dump
           pg_restore
           node
           npm
           git
           rg
           find
TEXT

## parse args

if ARGV.empty?
  puts HELP
  exit
end

# docker env vars
$env_vars = {
  'RAILS_ENV' => ENV.fetch('RAILS_ENV', 'development')
}

$verbose = false
$pretend = false

GetoptLong.new(
  ['--help', '-h', GetoptLong::NO_ARGUMENT],
  ['--verbose', '-v', GetoptLong::NO_ARGUMENT],
  ['--pretend', GetoptLong::NO_ARGUMENT],
  ['--test', '-t', GetoptLong::NO_ARGUMENT],
  ['--development', '-d', GetoptLong::NO_ARGUMENT],
  ['--production', '-P', GetoptLong::NO_ARGUMENT],
  ['--branch', GetoptLong::REQUIRED_ARGUMENT],
  ['--environment', '-e', GetoptLong::REQUIRED_ARGUMENT]
).each do |name, val|
  case name
  when '--help'
    puts HELP
    exit
  when '--verbose'
    $verbose = true
  when '--pretend'
    $pretend = true
  when '--test'
    $env_vars['RAILS_ENV'] = 'test'
  when '--development'
    $env_vars['RAILS_ENV'] = 'development'
  when '--production'
    raise RuntimeError
  when '--environment'
    raise ArgumentError, "invalid env var" unless val.include?('=')

    k, v = val.strip.split('=')
    $env_vars[k] = v
  end
end

CHOICE = ARGV.first
REST = ARGV[1..].join(' ')

def shell_exec(cmd)
  warn cmd if $verbose || $pretend
  exec cmd unless $pretend
end

def docker_exec(container, cmd, rest = nil, extra_flags: nil)
  raise RuntimeError unless SERVICES.include?(container.to_s)

  cmd = [
    DOCKER_COMPOSE,
    "exec",
    $env_vars.to_a.map { |arr| arr.join("=") }.map { "-e #{_1}" }.join(' '),
    extra_flags,
    container.to_s,
    cmd,
    rest
  ].compact.join(' ')

  shell_exec cmd
end

def print_status
  puts "#{File.read('/etc/hostname').chomp}:#{REPO}"
  printf `git log --format="%h %cs %s" -n 1`
  running_services = `docker compose ps --services --filter status=running`.split("\n")

  exit_status = 0

  SERVICES.each do |service|
    running = running_services.include?(service)
    exit_status = 1 unless running
    puts "[#{running ? 'âœ“' : 'X'}] #{service} "
  end
  exit exit_status
end

case CHOICE
when 'help'
  puts HELP
when 'setup-folders'
  FOLDERS.each do |folder|
    FileUtils.mkdir_p File.join(REPO, folder)
  end
when 'status'
  print_status
when 'd', 'docker', 'docker_compose', 'docker-compose', 'compose'
  shell_exec "docker compose #{REST}"
when 'up'
  shell_exec "docker compose up -d"
when 'down'
  shell_exec "docker compose down"
when 'build'
  shell_exec "bin/build"
when 'logs'
  logfile = "/littlesis/log/#{$env_vars['RAILS_ENV']}.log"
  docker_exec :app, "tail -f #{logfile}"
when 'pumactl'
  docker_exec :app, "bundle exec pumactl -p tmp/puma.pid", REST
when 'test', 'rspec'
  $env_vars['RAILS_ENV'] = 'test'
  docker_exec :app, "bundle exec rspec", REST
when 'rails'
  docker_exec :app, "bundle exec rails", REST
when 'runner'
  docker_exec :app, "bundle exec rails runner", REST
when 'bundle'
  docker_exec :app, "bundle", REST
when 'rake'
  docker_exec :app, "bundle exec rake", REST
when 'script'
  if REST == 'list'
    puts Dir[File.join(REPO, "lib/scripts/*")].map { File.basename(_1) }.join("\n")
  else
    docker_exec :app, "bundle exec lib/scripts/#{REST}"
  end
when 'bash'
  docker_exec :app, "bash --login", REST
when 'console', 'c'
  docker_exec :app, "bundle exec rails c"
when 'redis'
  docker_exec :redis, "redis-cli"
when 'data'
  docker_exec :app, "bundle exec rails runner lib/scripts/data.rb", REST
when 'fec'
  docker_exec :app, "bundle exec rails runner lib/scripts/fec", REST
when 'sec'
  docker_exec :app, "bundle exec rails runner lib/scripts/sec", REST
when 'git', 'rg', 'find'
  shell_exec [CHOICE, REST].join(' ')
when 'edit'
  shell_exec "$EDITOR #{REST == '' ? `fd | fzf`.chomp : REST}"
when 'node'
  docker_exec :app, "node", REST
when 'psql', 'pg_dump', 'pg_restore', 'pg_dumpall', 'pg_basebackup'
  docker_exec :postgres, CHOICE, REST, extra_flags: '-u postgres'
when 'esbuild'
  docker_exec :app, "npm run build"
when 'print-docker-command'
  puts [
         DOCKER_COMPOSE,
         "--project-directory #{REPO}",
         "exec",
         $env_vars.to_a.map { |arr| arr.join("=") }.map { "-e #{_1}" }.join(' '),
         "app"
       ].join(' ')
else
  warn "Invalid Command: #{CHOICE}"
  exit 1
end
